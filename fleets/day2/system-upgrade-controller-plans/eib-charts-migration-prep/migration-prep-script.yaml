apiVersion: v1
kind: Secret
metadata:
  name: migration-prep-script
type: Opaque
stringData:
  prepare_chart_migration.sh: |
    #!/bin/sh
    set -eo pipefail

    manifest_dir_path=
    config_path=

    runOnNode() {
        chroot /host "$@" 
    }

    setupPaths() {
        if runOnNode test -d "/etc/rancher/rke2/"; then
            manifest_dir_path=/var/lib/rancher/rke2/server/manifests
            config_path=/etc/rancher/rke2/config.yaml
        elif runOnNode test -d "/etc/rancher/k3s/"; then
            manifest_dir_path=/var/lib/rancher/k3s/server/manifests
            config_path=/etc/rancher/k3s/config.yaml
        else 
            echo "Unknown Kubernetes distribution, '/etc/rancher/rke2/' or '/etc/rancher/k3s/' configuration directories not found."
            exit 1
        fi
    }

    backupManifest() {
        backup_manifest=${1}

        if [ -z "${MANIFEST_BACKUP_DIR}" ]; then
            date_suffix=$(date +"%Y%m%d%H%M")
            backup_location=/tmp/eib-chart-manifests-backup-${date_suffix}
            runOnNode mkdir -p ${backup_location}
        else
            if runOnNode test ! -d "${MANIFEST_BACKUP_DIR}"; then
                runOnNode mkdir -p ${MANIFEST_BACKUP_DIR}
            fi

            backup_location=${MANIFEST_BACKUP_DIR}
        fi

        echo "Backing up ${backup_manifest} under ${backup_location}"
        runOnNode cp ${backup_manifest} ${backup_location}
    }

    isInitialiser() {
        # HelmChart manifests are located on the initialiser node, so the script must
        # first determine whether it is running in a Pod that is on the initialiser node.
        echo "Determining whether current node is an initialiser node."

        if runOnNode test ! -f "${config_path}"; then
            # A missing config.yaml file would indicate that this is a single-node cluster.
            # Otherwise the config.yaml file would hold configuration (e.g. related to HA setups, or single-node setup).
            echo "${config_path} missing, assuming that this is a single-node cluster"
            return 0
        fi

        if runOnNode grep -q "server:" ${config_path}; then
            # A config.yaml file containing the 'server' configuration would indicate that this is an
            # additional node added to a HA cluster setup. Hence not the initialiser node.
            echo "Non-initialiser node detected."
            return 1
        fi

        # If the config.yaml file exists and does not hold the 'server' configuration, then this
        # is either a single-node server with some configurations, or an initialiser node of an 
        # HA cluster setup. In both cases, the node can be treated as an initialiser.
        echo "Initialiser node detected."
        return 0
    }

    removeHelmChartManifests() {
        date_suffix=$(date +"%Y%m%d%H%M")
        cluster_helmcharts=/tmp/cluster_helm_charts_$date_suffix.txt

        # Custom output columns for the 'kubectl get helmcharts -A' command
        custom_columns='NAMESPACE:.metadata.namespace,NAME:.metadata.name'

        # Output file for the 'kubectl get helmcharts -A' command
        helmcharts_file="helmcharts.txt"

        # Annotation added by EIB to each chart it deploys
        eib_annotation='"edge.suse.com/source":"edge-image-builder"'

        # Get all helmcharts in the cluster and print their namespace and name only
        kubectl get helmcharts -A -o custom-columns="$custom_columns" --no-headers | tr -s ' ' > $cluster_helmcharts
        trap "rm $cluster_helmcharts" EXIT

        echo "Searching for HelmCharts deployed by EIB.."
        while read -r namespace name; do
            get_annotations_cmd=$(kubectl get helmchart "$name" -n "$namespace" -o jsonpath='{.metadata.annotations}')
              case "$get_annotations_cmd" in
                *"$eib_annotation"*)
                    chart_manifest_path=$manifest_dir_path/$name.yaml

                    if runOnNode test ! -f "$chart_manifest_path"; then
                        echo "EIB deployed HelmChart $namespace/$name does not have a manifest file under $manifest_dir_path. Skipping.."
                        continue
                    fi

                    backupManifest $chart_manifest_path
                    echo "Removing manifest file for HelmChart $name located under $manifest_dir_path.."
                    runOnNode rm $chart_manifest_path
                    ;;
                *)
                    echo "HelmChart $namespace/$name is not deployed by EIB. Skipping.."
                    ;;
              esac
        done < $cluster_helmcharts
    }

    main() {
        setupPaths

        if ! isInitialiser; then
            # Non-initialiser nodes do not hold the HelmChart manifests
            # that need to be upgraded, hence we conclude the script's excecution.
            exit 0
        fi

        removeHelmChartManifests
    }

    main
