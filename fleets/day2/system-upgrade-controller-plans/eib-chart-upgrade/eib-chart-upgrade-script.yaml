apiVersion: v1
kind: Secret
metadata:
  name: eib-chart-upgrade-script
type: Opaque
stringData:
  upgrade.sh: |
    #!/bin/sh
    set -eo pipefail

    chart_data_path=/run/system-upgrade/secrets/eib-chart-upgrade-user-data/chart_upgrade_data.txt
    manifest_dir_path=
    config_path=

    setupPaths() {
        if [ -d /etc/rancher/rke2/ ]; then
            manifest_dir_path=/var/lib/rancher/rke2/server/manifests
            config_path=/etc/rancher/rke2/config.yaml
        elif [ -d /etc/rancher/k3s/ ]; then
            manifest_dir_path=/var/lib/rancher/k3s/server/manifests
            config_path=/etc/rancher/k3s/config.yaml
        else 
            echo "Unknown Kubernetes distribution, '/etc/rancher/rke2/' or '/etc/rancher/k3s/' configuration directories not found."
            exit 1
        fi
    }

    backupManifest() {
        backup_manifest=${1}

        if [ -z "${MANIFEST_BACKUP_DIR}" ]; then
            date_suffix=$(date +"%Y%m%d%H%M")
            backup_location=/tmp/eib-helm-chart-upgrade-${date_suffix}
            mkdir -p ${backup_location}
        else
            backup_location=${MANIFEST_BACKUP_DIR}
        fi

        echo "Backing up ${backup_manifest} under ${backup_location}"
        cp ${backup_manifest} ${backup_location}
    }

    updateChartArchive() {
        chartSuffix="-chart"

        while IFS= read -r chart_data; do
            [ -z "$chart_data" ] && continue
            echo "---"

            name=$(cut -d '|' -f 1 <<< "$chart_data")
            version=$(cut -d '|' -f 2 <<< "$chart_data")
            archive=$(cut -d '|' -f 3- <<< "$chart_data")

            if [[ $name == *"$chartSuffix" ]]; then
                name=${name%$chartSuffix}
            fi

            chart_manifest_path=${manifest_dir_path}/${name}.yaml

            backupManifest ${chart_manifest_path}
            
            echo "Modifying the 'chartContent' property of the ${chart_manifest_path} manifest file"
            sed -i "s|chartContent:.*|chartContent: $archive|" ${chart_manifest_path}

            echo "Modifying the 'version' property of the ${chart_manifest_path} manifest file"
            sed -i "s|version:.*|version: $version|" ${chart_manifest_path}

            echo "${chart_manifest_path} chart manifest has been successfully modified."

        done < "${chart_data_path}"
    }

    isInitialiser() {
        # HelmChart manifests are located on the initialiser node, so the script must
        # first determine whether it is running in a Pod that is on the initialiser node.
        echo "Determining whether current node is an initialiser node."

        if [ ! -f ${config_path} ]; then
            # A missing config.yaml file would indicate that this is a single-node cluster.
            # Otherwise the config.yaml file would hold configuration (e.g. related to HA setups, or single-node setup).
            echo "${config_path} missing, assuming that this is a single-node cluster"
            return 0
        fi

        if grep -q "server:" ${config_path}; then
            # A config.yaml file containing the 'server' configuration would indicate that this is an
            # additional node added to a HA cluster setup. Hence not the initialiser node.
            echo "Non-initialiser node detected."
            return 1
        fi

        # If the config.yaml file exists and does not hold the 'server' configuration, then this
        # is either a single-node server with some configurations, or an initialiser node of an 
        # HA cluster setup. In both cases, the node can be treated as an initialiser.
        echo "Initialiser node detected."
        return 0
    }

    main() {
        setupPaths

        if ! isInitialiser; then
            # Non-initialiser nodes do not hold the HelmChart manifests
            # that need to be upgraded, hence we conclude the script's excecution.
            exit 0
        fi

        updateChartArchive
    }

    main
