apiVersion: v1
kind: Secret
metadata:
  name: eib-charts-upgrader-script
type: Opaque
stringData:
  chartPatch.sh: |
    #!/bin/bash
    set -eo pipefail

    chart_upgrade_data=/tmp/chart-upgrade-data
    eib_annotation='"edge.suse.com/source":"edge-image-builder"'

    empty_dir=1
    for chart_data_file in "$chart_upgrade_data"/*.txt; do
      [ -e "$chart_data_file" ] || continue

      if [ "$empty_dir" -eq "1" ]; then
        empty_dir=0
      fi

      chart_data=$(cat "$chart_data_file")
      name=$(cut -d '|' -f 1 <<< "$chart_data")
      version=$(cut -d '|' -f 2 <<< "$chart_data")
      archive=$(cut -d '|' -f 3- <<< "$chart_data")
      namespace=""


      echo "Locating HelmChart with name: $name.."  
      # All namespaces where the HelmChart resource is found with this name..
      namespaces=( $(kubectl get helmcharts -A --ignore-not-found --no-headers --field-selector metadata.name=$name | tr -s ' ' | cut -d ' ' -f 1) )

      if [ ${#namespaces[@]} -gt 1 ]; then
        echo "Located more than one HelmChart with name: '$name' inside of the cluster. Finding the EIB deployed HelmChart.."

        for ns in "${namespaces[@]}"
        do 
          get_annotations_cmd=$(kubectl get helmchart "$name" -n "$ns" -o jsonpath='{.metadata.annotations}')
          case "$get_annotations_cmd" in
            *"$eib_annotation"*)
              echo "EIB deployed HelmChart located: $ns/$name. Proceeding to upgrade.."
              namespace=${ns}
              break
              ;;
            *)
              echo "HelmChart $ns/$name is not deployed by EIB. Skipping.."
              continue
              ;;
          esac
        done
      elif [ ${#namespaces[@]} -eq 1 ]; then
        namespace=${namespaces[0]}
      else
        echo "HelmChart resource '$name' not found. Skipping upgrade.."
        continue
      fi

      echo "Patching $name.."
      patch_file=$(mktemp)
      echo "{\"spec\":{\"chartContent\":\"$archive\", \"version\":\"$version\"}}" > "$patch_file"
      if ! kubectl patch helmchart "$name" --type=merge --patch-file="$patch_file" -n "$namespace"; then
        echo "Failed to patch HelmChart $namespace/$name. Skipping.."
        continue
      fi
    done

    if [ "$empty_dir" -eq "1" ]; then
      echo "$chart_upgrade_data has no provided upgrade data."
      echo "Make sure you generate your chart data first before running this workload."
      exit 1
    fi
